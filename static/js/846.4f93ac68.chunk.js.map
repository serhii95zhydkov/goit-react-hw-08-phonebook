{"version":3,"file":"static/js/846.4f93ac68.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","redux/filter/filter-selectors.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Loader/Loader.jsx","pages/PhonebookPage/PhonebookPage.jsx"],"sourcesContent":["export const getAllContacts = ({ contacts }) => contacts.items;\nexport const getIsLoading = ({ contacts }) => contacts.isLoading;\n\nexport const getFilteredContacts = ({ contacts, filter }) => {\n  if (!filter) {\n    return contacts.items;\n  }\n  const normalizingFilter = filter.toLowerCase().trim();\n  const result = contacts.items.filter(({ name }) => {\n    return name.toLowerCase().includes(normalizingFilter);\n  });\n\n  return result;\n};\n","import styled from 'styled-components';\n\nconst StyledContactForm = styled.form`\n  width: 468px;\n  border: 1px solid black;\n  padding: 15px;\n`;\n\nconst StyledLabelForm = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  font-size: 18px;\n  font-weight: 500;\n`;\n\nconst StyledInputForm = styled.input`\n  width: 320px;\n  padding: 4px 12px;\n  height: 20px;\n  border-radius: 5px;\n  font-size: 16px;\n`;\n\nconst StyledButtonForm = styled.button`\n  padding: 4px 12px;\n  margin-top: 10px;\n  cursor: pointer;\n  border-radius: 5px;\n  font-size: 16px;\n  font-weight: 500;\n\n  &:hover,\n  &:focus {\n    color: white;\n    background-color: green;\n  }\n`;\n\nexport {\n  StyledContactForm,\n  StyledLabelForm,\n  StyledInputForm,\n  StyledButtonForm,\n};\n","import { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { fetchContacts, addContact } from 'redux/contacts/contacts-operations';\n\nimport {\n  StyledContactForm,\n  StyledLabelForm,\n  StyledInputForm,\n  StyledButtonForm,\n} from './ContactForm.styled';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'phone':\n        setPhone(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    dispatch(addContact({ name, phone }));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <StyledContactForm onSubmit={handleSubmit}>\n      <StyledLabelForm>\n        Name\n        <StyledInputForm\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </StyledLabelForm>\n      <StyledLabelForm>\n        Number\n        <StyledInputForm\n          type=\"tel\"\n          name=\"phone\"\n          value={phone}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </StyledLabelForm>\n      <StyledButtonForm type=\"submit\">Add contact</StyledButtonForm>\n    </StyledContactForm>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nconst StyledItemContacts = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nconst StyledTextContacts = styled.p`\n  font-size: 18px;\n  font-weight: 500;\n`;\n\nconst StyledButtonContacts = styled.button`\n  padding: 2px 8px;\n  font-size: 16px;\n  border: 1px solid black;\n  border-radius: 5px;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: red;\n    color: white;\n  }\n`;\n\nexport { StyledItemContacts, StyledTextContacts, StyledButtonContacts };\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contacts-operations';\n\nimport {\n  StyledItemContacts,\n  StyledTextContacts,\n  StyledButtonContacts,\n} from './ContactItem.styled';\n\nconst ContactItem = ({ contact: { id, name, phone } }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <StyledItemContacts>\n      <StyledTextContacts>\n        {name}: {phone}\n      </StyledTextContacts>\n      <StyledButtonContacts\n        onClick={() => dispatch(deleteContact(id))}\n        type=\"button\"\n      >\n        Delete\n      </StyledButtonContacts>\n    </StyledItemContacts>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default ContactItem;\n","import styled from 'styled-components';\n\nconst StyledContactList = styled.ul`\n  width: 320px;\n  padding: 15px;\n`;\n\nexport { StyledContactList };\n","import { useSelector } from 'react-redux';\n\nimport { getFilteredContacts } from 'redux/contacts/contacts-selectors';\n\nimport ContactItem from 'components/ContactItem/ContactItem';\n\nimport { StyledContactList } from './ContactList.styled';\n\nconst ContactList = () => {\n  const filteredContacts = useSelector(getFilteredContacts);\n\n  return (\n    <StyledContactList>\n      {filteredContacts.map(contact => {\n        return <ContactItem key={contact.id} contact={contact}></ContactItem>;\n      })}\n    </StyledContactList>\n  );\n};\n\nexport default ContactList;\n","export const getFilter = ({ filter }) => filter;\n","import styled from 'styled-components';\n\nconst StyledLabelFilter = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  font-size: 18px;\n  font-weight: 500;\n`;\n\nconst StyledInputFilter = styled.input`\n  width: 320px;\n  padding: 4px 12px;\n  height: 20px;\n  border-radius: 5px;\n  font-size: 16px;\n`;\n\nexport { StyledLabelFilter, StyledInputFilter };\n","import { useSelector, useDispatch } from 'react-redux';\n\nimport { getFilter } from 'redux/filter/filter-selectors';\nimport { setFilter } from 'redux/filter/filter-slice';\n\nimport { nanoid } from 'nanoid';\n\nimport { StyledLabelFilter, StyledInputFilter } from './Filter.styled';\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n\n  const dispatch = useDispatch();\n\n  const handleFilter = ({ target }) => {\n    dispatch(setFilter(target.value));\n  };\n\n  const filterId = nanoid();\n  return (\n    <StyledLabelFilter htmlFor={filterId}>\n      Find contacts by name\n      <StyledInputFilter\n        id={filterId}\n        type=\"text\"\n        value={filter}\n        onChange={handleFilter}\n      ></StyledInputFilter>\n    </StyledLabelFilter>\n  );\n};\n\nexport default Filter;\n","import { Radio } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <>\n      <Radio />\n    </>\n  );\n};\n\nexport default Loader;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contacts-operations';\nimport { getIsLoading } from 'redux/contacts/contacts-selectors';\n\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport Loader from 'components/Loader/Loader';\n\nconst PhonebookPage = () => {\n  const isLoading = useSelector(getIsLoading);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && <Loader />}\n      <ContactList />\n    </>\n  );\n};\n\nexport default PhonebookPage;\n"],"names":["getIsLoading","contacts","isLoading","getFilteredContacts","filter","items","normalizingFilter","toLowerCase","trim","name","includes","StyledContactForm","styled","StyledLabelForm","StyledInputForm","StyledButtonForm","useState","setName","phone","setPhone","handleChange","target","value","dispatch","useDispatch","useEffect","fetchContacts","reset","onSubmit","event","preventDefault","addContact","type","onChange","pattern","title","required","StyledItemContacts","StyledTextContacts","StyledButtonContacts","contact","id","onClick","deleteContact","StyledContactList","filteredContacts","useSelector","map","getFilter","StyledLabelFilter","StyledInputFilter","filterId","nanoid","htmlFor","setFilter"],"sourceRoot":""}